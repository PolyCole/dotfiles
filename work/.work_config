# Print big ol' Ibotta logo.
COLOR='\e[38;5;231m\e[48;5;198m'
NC='\033[0m'
echo ""
# echo "
# ${COLOR}                                                           ${NC}
# ${COLOR}  /\$\$\$\$\$\$ /\$\$                   /\$\$     /\$\$                ${NC}
# ${COLOR} |_  \$\$_/| \$\$                  | \$\$    | \$\$                ${NC}
# ${COLOR}   | \$\$  | \$\$\$\$\$\$\$   /\$\$\$\$\$\$  /\$\$\$\$\$\$ /\$\$\$\$\$\$    /\$\$\$\$\$\$   ${NC}
# ${COLOR}   | \$\$  | \$\$__  \$\$ /\$\$__  \$\$|_  \$\$_/|_  \$\$_/   |____  \$\$  ${NC}
# ${COLOR}   | \$\$  | \$\$  \ \$\$| \$\$  \ \$\$  | \$\$    | \$\$      /\$\$\$\$\$\$\$  ${NC}
# ${COLOR}   | \$\$  | \$\$  | \$\$| \$\$  | \$\$  | \$\$ /\$\$| \$\$ /\$\$ /\$\$__  \$\$  ${NC}
# ${COLOR}  /\$\$\$\$\$\$| \$\$\$\$\$\$\$/|  \$\$\$\$\$\$/  |  \$\$\$\$/|  \$\$\$\$/|  \$\$\$\$\$\$\$  ${NC}
# ${COLOR} |______/|_______/  \______/    \___/   \___/   \_______/  ${NC}
# ${COLOR}                                                           ${NC} 
# "

echo "
${COLOR}                                        ${NC}
${COLOR}  /\$\$\$\$\$\$ /\$\$\$\$\$\$\$  /\$\$\$\$\$\$\$\$ /\$\$\$\$\$\$   ${NC}
${COLOR} |_  \$\$_/| \$\$__  \$\$|__  \$\$__//\$\$__  \$\$  ${NC}
${COLOR}   | \$\$  | \$\$  \ \$\$   | \$\$  | \$\$  \ \$\$  ${NC}
${COLOR}   | \$\$  | \$\$\$\$\$\$\$    | \$\$  | \$\$\$\$\$\$\$\$  ${NC}
${COLOR}   | \$\$  | \$\$__  \$\$   | \$\$  | \$\$__  \$\$  ${NC}
${COLOR}   | \$\$  | \$\$  \ \$\$   | \$\$  | \$\$  | \$\$  ${NC}
${COLOR}  /\$\$\$\$\$\$| \$\$\$\$\$\$\$/   | \$\$  | \$\$  | \$\$  ${NC}
${COLOR} |______/|_______/    |__/  |__/  |__/  ${NC}
${COLOR}                                        ${NC}
"

print "$(python3 $DOTFILES/personal/get_startup_message.py)\n"

# ************************************
#          Common Locations
# ************************************
export REPO_BASE_PATH=~/repos
export PATH="$PATH:$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin"


# ************************************
#            ASDF Config
# ************************************
# . /usr/local/opt/asdf/asdf.sh

# ************************************
#              ALIASES
# ************************************
# Ibotta Monolith stuff.
alias awslog="saml2aws login --skip-prompt --force --session-duration=43200"
alias drake="saml2aws exec --exec-profile monolith -- bin/drake"
alias monolith="$REPO_BASE_PATH/Ibotta"
alias rspec="saml2aws exec --exec-profile monolith -- bin/drake spring rspec"
alias ecrlogin="(saml2aws exec --exec-profile monolith -- aws ecr get-login-password --region us-east-1) | docker login --password-stdin --username AWS 264606497040.dkr.ecr.us-east-1.amazonaws.com"

# DevEx Stuff
alias nx="npx nx"
alias catalog="$REPO_BASE_PATH/ibotta-catalog"
alias tk="$REPO_BASE_PATH/tech-knowledge"
alias hub="$REPO_BASE_PATH/enablement-data-hub"
alias portal="$REPO_BASE_PATH/enablement-data-portal"
alias cha="$REPO_BASE_PATH/consumer-hub-adapter"
alias scripts="cat package.json| jq .scripts"

# Microservice stuff.
alias ecrchk="saml2aws exec --exec-profile monolith -- ~/ecrimagecheck.sh"
alias gradle="./gradlew"
alias detekt="gradle task detekt"
alias bvs="$REPO_BASE_PATH/barcode-verification-service"
alias wtc="$REPO_BASE_PATH/walmart-tc-service"
alias ros="$REPO_BASE_PATH/receipt-ocr-service"
alias som="$REPO_BASE_PATH/synchronous-matching-lambda"
alias trs="$REPO_BASE_PATH/transaction-return-service"
alias rdc="$REPO_BASE_PATH/receipt-data-coordinator"
alias prs="$REPO_BASE_PATH/purchase-rating-service"
alias acs="$REPO_BASE_PATH/auto-credit-service"
alias earnings="$REPO_BASE_PATH/earnings-service"
alias aws-som="saml2aws exec --exec-profile staging-synchronous-matching-lambda -- "

# Granted/Assume ABAC Stuff
export GRANTED_ALIAS_CONFIGURED="true"
alias assume=". assume"

# General Aliases
alias format-clip="jq '.Message' | jq -r '.' | jq ."
alias repos="cd /Users/cole.polyak/repos"
alias tools="~/toolbox"
alias check_receipt="python ~/toolbox/ibotta_scripts/check_receipt.py"

# Programmatically generated linker aliases
if [ -f $HOME/.linker_aliases ]; then
   . $HOME/.linker_aliases
fi
# alias zhelp="custom_commands_help.sh"
# alias monopr="monolith_pr_generator.sh"
# alias open-in-admin="open_in_admin.sh"

# zsh-osx-keychain stuff.
alias peek-zshenv-var="keychain-environment-variable"
alias rm-zshenv-var="delete-keychain-environment-variable"
  # note: this is for setting variables, you just specify the var name first.
alias zshenv-var="set-keychain-environment-variable"

# Monolith deploy on-call items
alias oncall-check="saml-monolith ibotta_cli application revisions api-server 'environment:production'"
alias oncall-deploy="saml-monolith ibotta_cli application deploy_api_server_production"
alias oncall-verify="saml-monolith ibotta_cli application verify_revisions api-server 'role:api_server*'"
alias oncall-fix="saml-monolith ibotta_cli application deploy_api_server_production --fix"
alias oncall-migrate="saml-monolith ./bin/drake db:migration:prod"
alias oncall-rollback="saml-monolith ibotta_cli application rollback_api_server_production"

# SSH Aliases
alias ssh-receipts="ssh receipts.dev.ibotta.com"
alias ssh-tools="ssh tools.ibotta.com"
alias ssh-cole="ssh colep.dev.ibotta.com"

# NPX Goodness
alias clean="npx nx run-many --target=clean --all"

# ************************************
#       Environment Variables
# ************************************

# AWS Vars
export AWS_DEFAULT_REGION=us-east-1
export AWS_REGION=us-east-1
export AWS_SESSION_TTL=12h
export AWS_FEDERATION_TOKEN_TTL=12h
export AWS_ASSUME_ROLE_TTL=1h
export AWS_DEFAULT_REGION=us-east-1
export AWS_REGION=$AWS_DEFAULT_REGION

# Private Repo Logins.
export GEM_REPO_LOGIN=$(keychain-environment-variable PRIVATE_PACKAGE_REPO_LOGIN)
export NPM_REPO_LOGIN=$(keychain-environment-variable PRIVATE_PACKAGE_REPO_LOGIN)
export MVN_REPO_LOGIN=$(keychain-environment-variable PRIVATE_PACKAGE_REPO_LOGIN)
# export MASTER_GENERATOR_LOGIN=$(keychain-environment-variable MASTER_GENERATOR_LOGIN)

# Services to check on start-up
# export EARNINGS=$(keychain-environment-variable EARNINGS)
# export ACS=$(keychain-environment-variable ACS)
# export PRS=$(keychain-environment-variable PRS)

# Kubernetes -- Staging is default environment.
export KUBECONFIG=~/.kube/apollo

# Docker/Colima
export DOCKER_HOST="unix:///${HOME}/.colima/docker.sock"

# ************************************
#        Path Modification
# ************************************
export PATH="/Users/cole.polyak/toolbox/ibotta_scripts:$PATH"
export PATH="/Users/cole.polyak/toolbox/ibotta_scripts/ibotta_linkers:$PATH"
export PATH="/Users/cole.polyak/toolbox/found_scripts:$PATH"
path+=('/home/[user]/npm/bin')

# ************************************
#             Miscellaneous
# ************************************
if which rbenv > /dev/null; then eval "$(rbenv init - zsh)"; fi

export NVM_DIR="$HOME/.nvm"
[ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && . "$(brew --prefix)/opt/nvm/nvm.sh" # This loads nvm
[ -s "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm" ] && \. "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm" # This loads nvm bash_completion

export GEMINI_API_KEY=$(keychain-environment-variable GEMINI_API_KEY)

# ************************************
#           Git Shortcuts
# ************************************
function qc() {
  if [ $# -eq 0 ]; then
    echo "Please provide a commit message:"
    echo "qc \"your commit message\""
  else
    git add -A && git commit -m "$1" && git push
  fi
}

schedule() {
  print "\n***************************************"
  print "ðŸŸ¢ Dotfiles -- M, W, F   @9:30 am"
  print "ðŸ§° Toolbox  -- T, R,     @9:30 am"
  print "ðŸ§° Toolbox  -- F         @3:30 pm"
  print "***************************************"
}

# ************************************
#       Microservice Deployments
# ************************************
function build_and_promote() {
  if [ $# -ne 2 ]; then
    print "Please specify the service and commit hash using: \n"
    print "build_and_promote [service] git-[commit hash]"
  else
    echo "************** Building **************"
    gradle clean build

    echo "************** Deploying **************"
    echo running saml2aws exec --exec-profile monolith -- $REPO_BASE_PATH/travis-shared-config/deployment/publish_and_promote.sh $1 $2
    saml2aws exec --exec-profile monolith -- $REPO_BASE_PATH/travis-shared-config/deployment/publish_and_promote.sh $1 $2
  fi
}

function promote() {
  if [ $# -ne 3 ]; then
    print "Please specify the service and commit hash using: \n"
    print "promote [service] git-[commit hash] [environment]"
  else
    echo saml2aws exec --exec-profile monolith -- $REPO_BASE_PATH/travis-shared-config/deployment/promote.sh $2 $3 $1
    saml2aws exec --exec-profile monolith -- $REPO_BASE_PATH/travis-shared-config/deployment/promote.sh $2 $1 $3
  fi
}

alias deploy_production="deploy_production "

function deploy_production() {
  if [ $# -lt 2 ]; then
    echo "Improper command format. Please use:"
    echo "\tdeploy_production git-<COMMIT_HASH> <SERVICE_NAME>"
  else
    saml2aws exec --exec-profile monolith -- $REPO_BASE_PATH/travis-shared-config/deployment/promote.sh $1 production $2
  fi;
}

# Deploying to staging via Argo.
argo-deploy-stage(){
  kubeconfig-stage
  ./scripts/deploy.sh staging
}

# ************************************
#        Monolith Deployment 
# ************************************

# Deploying published branch to monolith staging
mono-deploy-stage() {
  branchName="${1}"

  if [ -z "$branchName" ]; then
	   error "Must specify a branch name to deploy: mono-deploy-stage <branchName>"
  fi
  saml2aws exec --exec-profile staging -- ibotta_cli application deploy api-server name:receipts -r $branchName
}


# Deploys the specified branch to the specified monolith instance.
function deploy_mono_stage() {
  if [ $# -ne 2 ]; then
    print "Please specify the instance and branchname using: \n"
    print "deploy_mono_stage [instance] [branch]\n"
  else
    echo running: saml2aws exec --exec-profile staging -- ibotta_cli application deploy api-server name:$1 -r $2
    saml2aws exec --exec-profile staging -- ibotta_cli application deploy api-server name:$1 -r $2
  fi
}

# Pulls down and boots up the specified monolith staging instance.
function reset_mono_stage() {
  if [ $# -ne 1 ]; then
    print "Please specify the instance name using: \n"
    print "reset_mono_stage [instance]\n"
  else
    cd $REPO_BASE_PATH/infrastructure
    print "\n\nTearing and Rolling instance: $1\n\n"
    saml2aws exec --exec-profile staging -- ibotta_cli sfn destroy $1
    saml2aws exec --exec-profile staging -- ibotta_cli sfn create $1 -f sparkleformation/development.rb
  fi
}

# ************************************
#              Conduit
# ************************************
function conduit() {
  eval "$(git rev-parse --show-toplevel)/scripts/conduit $@"
}

# ************************************
#       Kubernetes Configuration
# ************************************

# Sets Kubernetes configuration to the production cluster.
kubeconfig-prod(){
  export KUBECONFIG=~/.kube/barrel
}

# Sets Kubernetes configuration to the staging cluster.
kubeconfig-stage(){
  export KUBECONFIG=~/.kube/apollo
}

# Sets Kubernetes configuration to my local machine.
kubeconfig-local() {
  export KUBECONFIG=~/.kube/config
}

# ************************************
#     Functions I wrote while very 
#    annoyed with a certain Kotlin 
#  Linter that shall remain nameless
# ************************************

function thanks_for_your_contribution_detekt() {
  print "\n\n**Detekt is an A1 linter**\n\n"
  ./gradlew detekt
  print "\n\n**I love every part of it**\n\n"
  git add -A
  print "\n\n**Especially that it flunks builds for arbitrary things**\n\n"
  git commit -m "Submitting to the indomitable will of Detekt."
  print "\n\n**That it then fixes on its own!**\n\n"
  git push
}


# python $DOTFILES/work/ping_services.py

typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet