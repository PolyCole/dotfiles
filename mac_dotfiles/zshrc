# ************************************
#      Cole's Z-Shell Config.
# ************************************

# Enabling powerlevel10k instant prompt.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh installation.
export ZSH="/Users/cole.polyak/.oh-my-zsh"

# Ensuring we source p10k.
source /usr/local/opt/powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# oh-my-zsh theme in case the ~simple~ asthetic is needed.
# ZSH_THEME="robbyrussell"
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# There are a bunch more configuration options for oh-my-zsh here,
# but I've removed them to save space. You can view them here:
# https://github.com/ohmyzsh/ohmyzsh/blob/master/templates/zshrc.zsh-template


plugins=(
  git
  zsh-osx-keychain
)

source $ZSH/oh-my-zsh.sh

# asdf config.
. /usr/local/opt/asdf/asdf.sh

# ************************************
#              ALIASES
# ************************************

# If, in the future, this gets unmanageable, there's a simple way to frag this.
# Similarly, this can be done to separate personal versus work files.
# if [ -f $HOME/.bash_aliases ]: then
#   . $HOME/.bash_aliases
# fi
# Obviously this is for bash_aliases, but something similar can be accomplished for zsh.

# Ibotta Monolith stuff.
alias awslog="saml2aws login --skip-prompt --force"
alias drake="saml2aws exec --exec-profile monolith -- bin/drake"
alias monolith="/Users/cole.polyak/Desktop/hub/repos/Ibotta"
alias rspec="saml2aws exec --exec-profile monolith -- bin/drake spring rspec"

# Microservice stuff.
alias ecrchk="saml2aws exec --exec-profile monolith -- ~/ecrimagecheck.sh"
alias gradle="./gradlew"
alias bvs="/Users/cole.polyak/Desktop/hub/repos/barcode-verification-service"
alias wtc="/Users/cole.polyak/Desktop/hub/repos/walmart-tc-service"
alias ocr="/Users/cole.polyak/Desktop/hub/repos/receipt-ocr-service"

# General Aliases
alias cat="bat"
alias diff="diff-so-fancy"
alias lsa="ls -a"
alias lsal="ls -al"
alias python="python3"
alias reload="source ~/.zshrc"
alias repos="cd /Users/cole.polyak/Desktop/hub/repos"
alias tools="cd ~/toolbox"
alias zhelp="custom_commands_help.sh"

# Pass-throughs
alias a="a "
alias o="o "

# zsh-osx-keychain stuff.
alias peek-zshenv-var="keychain-environment-variable"
alias rm-zshenv-var="delete-keychain-environment-variable"
alias zshenv-var="set-keychain-environment-variable"

# ************************************
#       ENVIRONMENT VARIABLES
# ************************************

# AWS Vars
export AWS_DEFAULT_REGION=us-east-1
export AWS_REGION=us-east-1
export AWS_SESSION_TTL=12h
export AWS_FEDERATION_TOKEN_TTL=12h
export AWS_ASSUME_ROLE_TTL=1h
export AWS_DEFAULT_REGION=us-east-1
export AWS_REGION=$AWS_DEFAULT_REGION

# Private Repo Logins.
export GEM_REPO_LOGIN=$(keychain-environment-variable PRIVATE_PACKAGE_REPO_LOGIN)
export NPM_REPO_LOGIN=$(keychain-environment-variable PRIVATE_PACKAGE_REPO_LOGIN)
export MVN_REPO_LOGIN=$(keychain-environment-variable PRIVATE_PACKAGE_REPO_LOGIN)
export MASTER_GENERATOR_LOGIN=$(keychain-environment-variable MASTER_GENERATOR_LOGIN)

# Kubernetes -- Staging is default environment.
export KUBECONFIG=~/.kube/apollo

# Ruby and Ruby Gems config.
export GEM_HOME="$HOME/.gems"
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1) --with-libyaml-dir=$(brew --prefix libyaml)"


export LDFLAGS="-L/usr/local/opt/ruby@2.6/lib"
export CPPFLAGS="-I/usr/local/opt/ruby@2.6/include"


# ************************************
#        PATH MODIFICATION
# ************************************

# append
path+=('/Users/cole.polyak/toolbox/ibotta_scripts')
path+=('/Users/cole.polyak/toolbox/ibotta_scripts/ibotta_linkers')
path+=('/Users/cole.polyak/toolbox/found_scripts')
export path


# ************************************
#             MISCELLANEOUS
# ************************************
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi


# ************************************
#             FUNCTIONS
# ************************************


# Deploying to staging via Argo.
deploy-argo-stage(){
        kubeconfig-stage
        ./scripts/deploy.sh staging
}

# Deploying to production via Argo.
deploy-argo-prod(){
        kubeconfig-prod
        ./scripts/deploy.sh production
}

# Setting Kubernetes config to Production.
kubeconfig-prod(){
        export KUBECONFIG=~/.kube/barrel
}

# Setting Kubernetes config to Staging.
kubeconfig-stage(){
        export KUBECONFIG=~/.kube/apollo
}

# Docker is being annoying, let's just burn it to the ground.
murderdocker() {
    docker volume prune
    docker container prune --filter "until=24h"
    docker image prune -a --filter "until=24h"
}

# Create a new directory and enter it
mkd() {
	mkdir -p "$@" && cd "$_";
}

# Prints the current week of the year
week() {
  echo "Week `date +%V` of 52"
}

# Purges a directory from a git repository, including the repo's history.
git-purge-dir() {
  git filter-branch --tree-filter "rm -rf $1" --prune-empty HEAD
  git for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git update-ref -d
  echo $1/ >> .gitignore
  git add .gitignore
  git commit -m "Removing $1 from git history."
  git gc
  git push origin main --force
}

# Opens the current (or specified) directory in file explorer.
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# Opens the current (or specified) directory in atom text editor.
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}



export PATH="/usr/local/opt/ruby@2.6/bin:$PATH"
