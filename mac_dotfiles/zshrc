# ************************************
#    Work Macbook Z-Shell Config.
# ************************************

# Path to your oh-my-zsh installation.
export ZSH="/Users/cole.polyak/.oh-my-zsh"

# Ensuring we source p10k.
source /usr/local/opt/powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Enabling powerlevel10k instant prompt.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# oh-my-zsh theme in case the ~simple~ asthetic is needed.
# ZSH_THEME="robbyrussell"
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# There are a bunch more configuration options for oh-my-zsh here,
# but I've removed them to save space. You can view them here:
# https://github.com/ohmyzsh/ohmyzsh/blob/master/templates/zshrc.zsh-template


plugins=(
  git
  zsh-osx-keychain
)

source $ZSH/oh-my-zsh.sh

# asdf config.
. /usr/local/opt/asdf/asdf.sh

# ************************************
#              ALIASES
# ************************************

# If, in the future, this gets unmanageable, there's a simple way to frag this.
# Similarly, this can be done to separate personal versus work files.
# if [ -f $HOME/.zsh_aliases ]: then
#   . $HOME/.zsh_aliases
# fi

# Ibotta Monolith stuff.
alias awslog="saml2aws login --skip-prompt --force --session-duration=43200"
alias drake="saml2aws exec --exec-profile monolith -- bin/drake"
alias monolith="/Users/cole.polyak/Desktop/hub/repos/Ibotta"
alias rspec="saml2aws exec --exec-profile monolith -- bin/drake spring rspec"
alias ecrlogin="(saml2aws exec --exec-profile monolith -- aws ecr get-login-password --region us-east-1) | docker login --password-stdin --username AWS 264606497040.dkr.ecr.us-east-1.amazonaws.com"

# Microservice stuff.
alias ecrchk="saml2aws exec --exec-profile monolith -- ~/ecrimagecheck.sh"
alias gradle="./gradlew"
alias detekt="gradle task detekt"
alias bvs="/Users/cole.polyak/Desktop/hub/repos/barcode-verification-service"
alias wtc="/Users/cole.polyak/Desktop/hub/repos/walmart-tc-service"
alias ocr="/Users/cole.polyak/Desktop/hub/repos/receipt-ocr-service"
alias trs="/Users/cole.polyak/Desktop/hub/repos/transaction-return-service"
alias rdc="/Users/cole.polyak/Desktop/hub/repos/receipt-data-coordinator"

# General Aliases
alias cat="bat"
alias diff="diff-so-fancy"
alias lsa="ls -a"
alias lsal="ls -al"
alias python="python3"
alias reload="source ~/.zshrc"
alias repos="cd /Users/cole.polyak/Desktop/hub/repos"
alias tools="~/toolbox"
alias check_receipt="python ~/toolbox/ibotta_scripts/check_receipt.py"

# Programmatically generated linker aliases
if [ -f $HOME/.linker_aliases ]; then
   . $HOME/.linker_aliases
fi
# alias zhelp="custom_commands_help.sh"
# alias monopr="monolith_pr_generator.sh"
# alias open-in-admin="open_in_admin.sh"

# Pass-throughs
alias a="a "
alias o="o "
alias pblint="pblint "
alias pbcheck="pbcheck "
alias pbbuild="pbbuild "

# zsh-osx-keychain stuff.
alias peek-zshenv-var="keychain-environment-variable"
alias rm-zshenv-var="delete-keychain-environment-variable"
  # note: this is for setting variables, you just specify the var name first.
alias zshenv-var="set-keychain-environment-variable"

# Monolith deploy on-call items
alias oncall-check="saml-monolith ibotta_cli application revisions api-server 'environment:production'"
alias oncall-deploy="saml-monolith ibotta_cli application deploy_api_server_production"
alias oncall-verify="saml-monolith ibotta_cli application verify_revisions api-server 'role:api_server*'"
alias oncall-fix="saml-monolith ibotta_cli application deploy_api_server_production --fix"
alias oncall-migrate="saml-monolith ./bin/drake db:migration:prod"
alias oncall-rollback="saml-monolith ibotta_cli application rollback_api_server_production"

# SSH Aliases
alias ssh-receipts="ssh receipts.dev.ibotta.com"
alias ssh-tools="ssh tools.ibotta.com"
alias ssh-cole="ssh cpolyak.dev.ibotta.com"

# Git Aliases
alias git-upstream="git push --set-upstream origin "

# ************************************
#       ENVIRONMENT VARIABLES
# ************************************

# AWS Vars
export AWS_DEFAULT_REGION=us-east-1
export AWS_REGION=us-east-1
export AWS_SESSION_TTL=12h
export AWS_FEDERATION_TOKEN_TTL=12h
export AWS_ASSUME_ROLE_TTL=1h
export AWS_DEFAULT_REGION=us-east-1
export AWS_REGION=$AWS_DEFAULT_REGION

# Private Repo Logins.
export GEM_REPO_LOGIN=$(keychain-environment-variable PRIVATE_PACKAGE_REPO_LOGIN)
export NPM_REPO_LOGIN=$(keychain-environment-variable PRIVATE_PACKAGE_REPO_LOGIN)
export MVN_REPO_LOGIN=$(keychain-environment-variable PRIVATE_PACKAGE_REPO_LOGIN)
export MASTER_GENERATOR_LOGIN=$(keychain-environment-variable MASTER_GENERATOR_LOGIN)

# Kubernetes -- Staging is default environment.
export KUBECONFIG=~/.kube/apollo

# Ruby and Ruby Gems config.
export GEM_HOME="$HOME/.gems"
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1) --with-libyaml-dir=$(brew --prefix libyaml)"
export LDFLAGS="-L/usr/local/opt/ruby@2.6/lib"
export CPPFLAGS="-I/usr/local/opt/ruby@2.6/include"


# ************************************
#        PATH MODIFICATION
# ************************************

# append
path+=('/Users/cole.polyak/toolbox/ibotta_scripts')
path+=('/Users/cole.polyak/toolbox/ibotta_scripts/ibotta_linkers')
path+=('/Users/cole.polyak/toolbox/found_scripts')
export path
export PATH="/usr/local/opt/ruby@2.6/bin:$PATH"


# ************************************
#             MISCELLANEOUS
# ************************************
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi


# ************************************
#             FUNCTIONS
# ************************************


# Deploying to staging via Argo.
argo-deploy-stage(){
  kubeconfig-stage
  ./scripts/deploy.sh staging
}

# Builds and deploys a local branch to staging.
argo-deploy-stage-local() {
  kubeconfig-stage

  currentRev=$(git describe --always)
  repo=$(basename `git rev-parse --show-toplevel`)
  commitMessage=$(git log -1 --pretty=%B)

  imageTag="${1}"

  if [ -z "$imageTag" ]; then
	   imageTag="git-$(git describe --always)" \
		   || error "Could not get git revision"
  fi

  printf "****************************************************\n"
  printf "~~Deploying revision:~~\n"
  printf "$currentRev\n"
  printf "$commitMessage\n"
  printf "\n~~Deploying to service:~~\n"
  printf "$repo\n"
  printf "\n~~Deploying ecr image:~~\n"
  printf "$imageTag\n"
  printf "****************************************************\n"

  gradle clean build
  saml2aws exec --exec-profile monolith -- ./scripts/ecr.sh $repo $currentRev

  ./scripts/deploy.sh staging $imageTag

}

# Deploying to production via Argo.
argo-deploy-prod(){
  kubeconfig-prod
  ./scripts/deploy.sh production
}

# Sets Kubernetes configuration to the production cluster.
kubeconfig-prod(){
  export KUBECONFIG=~/.kube/barrel
}

# Sets Kubernetes configuration to the staging cluster.
kubeconfig-stage(){
  export KUBECONFIG=~/.kube/apollo
}

# Sets Kubernetes configuration to my local machine.
kubeconfig-local() {
  export KUBECONFIG=~/.kube/config
}

# Deploying published branch to monolith staging
mono-deploy-stage() {
  branchName="${1}"

  if [ -z "$branchName" ]; then
	   error "Must specify a branch name to deploy: mono-deploy-stage <branchName>"
  fi
  saml2aws exec --exec-profile staging -- ibotta_cli application deploy api-server name:receipts -r $branchName
}

# Docker is being annoying, let's just burn it to the ground.
murderdocker() {
  docker volume prune
  docker container prune --filter "until=24h"
  docker image prune -a --filter "until=24h"
  docker network prune
}

# Create a new directory and enter it
mkd() {
	mkdir -p "$@" && cd "$_";
}

# Prints the current week of the year
week() {
  echo "Week `date +%V` of 52"
}

# Purges a directory from a git repository, including the repo's history.
git-purge-dir() {
  git filter-branch --tree-filter "rm -rf $1" --prune-empty HEAD
  git for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git update-ref -d
  echo $1/ >> .gitignore
  git add .gitignore
  git commit -m "Removing $1 from git history."
  git gc
  git push origin main --force
}

# Purges a file from a git repository, including the repo's history.
git-purge-file() {
  git filter-branch --tree-filter "rm -f $1" --prune-empty HEAD
  git for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git update-ref -d
  echo $1/ >> .gitignore
  git add .gitignore
  git commit -m "Removing $1 from git history."
  git gc
  git push origin main --force
}

schedule() {
  print "\n***************************************"
  print "ðŸŸ¢ Dotfiles -- M, W, F   @9:30 am"
  print "ðŸ§° Toolbox  -- T, R,     @9:30 am"
  print "ðŸ§° Toolbox  -- F         @3:30 pm"
  print "***************************************"
}

# Opens the current (or specified) directory in file explorer.
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# Opens the current (or specified) directory in atom text editor.
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# Deploys the specified branch to the specified monolith instance.
function deploy_mono_stage() {
  if [ $# -ne 2 ]; then
    print "Please specify the instance and branchname using: \n"
    print "deploy_mono_stage [instance] [branch]\n"
  else
    echo running: saml2aws exec --exec-profile staging -- ibotta_cli application deploy api-server name:$1 -r $2
    saml2aws exec --exec-profile staging -- ibotta_cli application deploy api-server name:$1 -r $2
  fi
}

# Pulls down and boots up the specified monolith staging instance.
function reset_mono_stage() {
  if [ $# -ne 1 ]; then
    print "Please specify the instance name using: \n"
    print "reset_mono_stage [instance]\n"
  else
    cd /Users/cole.polyak/Desktop/hub/repos/infrastructure
    print "\n\nTearing and Rolling instance: $1\n\n"
    saml2aws exec --exec-profile staging -- ibotta_cli sfn destroy $1
    saml2aws exec --exec-profile staging -- ibotta_cli sfn create $1 -f sparkleformation/development.rb
  fi
}

# Lints either all proto bufs, or a specified pb package.
function pblint() {
  if [ $# -eq 0 ]; then
		docker-compose run defs -- lint_protos;
	else
		docker-compose run defs -- lint_protos "$@";
	fi;
}

# Checks either all proto bufs for breaking changes, or a specified pb package.
function pbcheck() {
  if [ $# -eq 0 ]; then
		saml2aws exec --exec-profile monolith -- docker-compose run defs -- break_check_protos;
	else
		saml2aws exec --exec-profile monolith -- docker-compose run defs -- break_check_protos "$@";
	fi;
}

# Builds either all proto bufs, or a specified pb package.
function pbbuild() {
  if [ $# -eq 0 ]; then
		docker-compose run defs -- build_protos;
	else
		docker-compose run defs -- build_protos "$@";
	fi;
}

function thanks_for_your_contribution_detekt() {
  print "\n\n**Detekt is an A1 linter**\n\n"
  ./gradlew detekt
  print "\n\n**I love every part of it**\n\n"
  git add -A
  print "\n\n**Especially that it flunks builds for arbitrary things**\n\n"
  git commit -m "Submitting to the indomitable will of Detekt."
  print "\n\n**That it then fixes on its own!**\n\n"
  git push
}

# ls colors
LS_COLORS=$LS_COLORS:'di=1;32:ex=4;31' ; export LS_COLORS
